-- 알고리즘 학습 로드맵 대분류
INSERT INTO Algo_Roadmap (title, description, `order`, created_at, updated_at, question_count)
VALUES
('자료구조 기초', '스택, 큐, 리스트와 같은 기본 자료구조를 이해하는 것은 알고리즘 학습의 출발점입니다.', 1, '2025-09-02 09:15:00', NULL, 0),
('정렬', '데이터를 일정한 기준에 따라 재배열하는 기법으로, 선택 정렬, 삽입 정렬, 버블 정렬 등이 포함됩니다.', 2, '2025-09-04 14:20:00', '2025-09-05 10:45:00', 0),
('탐색', '데이터 집합에서 원하는 값을 찾는 방법으로, 선형 탐색과 이분 탐색이 대표적인 예시입니다.', 3, '2025-09-06 11:05:00', NULL, 0),
('재귀', '문제를 자기 자신을 호출하는 함수 구조로 단순화하여 해결하는 기법입니다.', 4, '2025-09-08 16:40:00', '2025-09-09 09:00:00', 0),
('동적 프로그래밍(DP)', '중복되는 부분 문제를 저장하여 효율적으로 해결하는 기법으로, 피보나치 수열과 같은 최적화 문제에 자주 사용됩니다.', 5, '2025-09-13 13:25:00', '2025-09-15 14:15:00', 0),
('그리디 알고리즘', '각 단계에서 최적의 선택을 반복하여 전체 문제의 해를 구하는 방법으로, 탐욕 알고리즘이라고도 불립니다.', 6, '2025-09-16 09:50:00', NULL, 0),
('문자열 알고리즘', '텍스트 데이터를 효율적으로 처리하기 위한 알고리즘으로, 패턴 검색 및 정렬 문제 해결에 활용됩니다.', 7, '2025-09-18 18:30:00', NULL, 0),
('트리', '계층적 구조를 표현하는 자료구조로, 탐색과 분류 문제 해결에 활용됩니다.', 8, '2025-09-22 08:45:00', '2025-09-23 17:45:00', 0),
('그래프', '정점과 간선으로 이루어진 구조를 다루며, 네트워크와 경로 탐색 문제 해결에 필수적입니다.', 9, '2025-09-27 20:10:00', NULL, 0);

-- 알고리즘 학습 로드맵 게시글
INSERT INTO Algo_Post (member_id, roadmap_id, title, content, created_at, updated_at, visibility) 
VALUES
(29, 1, '스택', '스택은 LIFO 구조로, 마지막에 넣은 데이터를 가장 먼저 꺼낼 수 있는 자료구조입니다. 주요 연산으로는 push, pop, peek 등이 있습니다.\n\n```java\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nint top = stack.pop();\n```', '2025-03-18 11:20:40', NULL, 'Y'),
(30, 1, '큐', '큐는 FIFO 구조로, 먼저 넣은 데이터가 먼저 나오는 자료구조입니다. 주로 대기열이나 작업 스케줄링에 사용됩니다.\n\n```java\nQueue<Integer> queue = new LinkedList<>();\nqueue.add(1);\nint first = queue.poll();\n```', '2025-03-20 15:45:12', NULL, 'Y'),
(29, 1, '연결 리스트', '연결 리스트는 각 노드가 다음 노드의 주소를 가리키는 선형 자료구조입니다. 삽입과 삭제가 배열보다 효율적입니다.\n\n```java\nLinkedList<Integer> list = new LinkedList<>();\nlist.add(1);\nlist.remove(0);\n```', '2025-03-22 19:12:01', '2025-03-23 09:14:33', 'Y'),
(29, 2, '버블 정렬', '버블 정렬은 인접한 원소를 반복적으로 비교하여 정렬하는 단순 알고리즘입니다.\n\n```java\nfor(int i=0;i<n-1;i++){\n  for(int j=0;j<n-i-1;j++){\n    if(arr[j]>arr[j+1]) swap(arr,j,j+1);\n  }\n}\n```', '2025-01-10 14:20:11', NULL, 'Y'),
(30, 2, '선택 정렬', '선택 정렬은 매번 가장 작은 값을 찾아 앞으로 이동시키는 방식으로 배열을 정렬합니다.\n\n```java\nfor(int i=0;i<n-1;i++){\n  int minIdx=i;\n  for(int j=i+1;j<n;j++) if(arr[j]<arr[minIdx]) minIdx=j;\n  swap(arr,i,minIdx);\n}\n```', '2025-01-15 09:15:44', '2025-01-18 10:12:20', 'Y'),
(29, 2, '퀵 정렬', '퀵 정렬은 분할 정복 기법을 사용하여 배열을 빠르게 정렬하는 알고리즘입니다.\n\n```java\nint pivot = arr[end];\npartition(arr,start,end,pivot);\n```', '2025-01-22 11:33:05', NULL, 'Y'),
(30, 2, '합병 정렬', '합병 정렬은 배열을 반으로 나눈 뒤 정렬하고 병합하는 안정적인 정렬 알고리즘입니다.\n\n```java\nmergeSort(arr,left,right);\n```', '2025-01-25 13:45:12', NULL, 'Y'),
(30, 3, '선형 탐색', '선형 탐색은 배열을 처음부터 끝까지 순차적으로 확인하는 탐색 방법입니다. 정렬 여부와 관계없이 사용 가능합니다.\n\n```java\nfor(int i=0;i<n;i++){\n  if(arr[i]==target) return i;\n}\n```', '2025-02-01 17:40:33', NULL, 'Y'),
(29, 3, '이진 탐색', '이진 탐색은 정렬된 배열에서 중간값을 기준으로 탐색 범위를 절반씩 줄여가며 찾는 효율적인 알고리즘입니다.\n\n```java\nwhile(start<=end){\n  int mid=(start+end)/2;\n  if(arr[mid]==target) return mid;\n  else if(arr[mid]<target) start=mid+1;\n  else end=mid-1;\n}\n```', '2025-02-05 13:22:12', '2025-02-07 08:14:55', 'Y'),
(30, 4, '재귀 기초', '재귀는 함수가 자기 자신을 호출하는 구조로, 반복적 문제를 간단하게 표현할 수 있습니다.\n\n```java\nvoid recur(){ recur(); }\n```', '2025-02-12 10:30:00', NULL, 'Y'),
(29, 4, '팩토리얼 계산', '재귀를 사용하여 팩토리얼을 계산할 수 있습니다.\n\n```java\nint fact(int n){ return n<=1 ? 1 : n*fact(n-1); }\n```', '2025-02-14 09:20:05', NULL, 'Y'),
(30, 4, '피보나치 재귀', '재귀로 피보나치 수열을 구현하면 직관적으로 표현할 수 있습니다.\n\n```java\nint fib(int n){ return n<=1 ? n : fib(n-1)+fib(n-2); }\n```', '2025-02-16 15:15:15', NULL, 'Y'),
(29, 5, '피보나치 DP', 'DP를 사용하면 재귀보다 훨씬 효율적으로 피보나치 수열을 계산할 수 있습니다.\n\n```java\nint[] dp = new int[n+1];\ndp[0]=0; dp[1]=1;\nfor(int i=2;i<=n;i++) dp[i]=dp[i-1]+dp[i-2];\n```', '2025-03-01 09:55:20', NULL, 'Y'),
(30, 5, '최장 증가 부분 수열(LIS)', '주어진 수열에서 가장 긴 증가하는 부분 수열을 찾는 DP 문제입니다.\n\n```java\nfor(int i=0;i<n;i++){\n  for(int j=0;j<i;j++){\n    if(arr[i]>arr[j]) dp[i]=Math.max(dp[i],dp[j]+1);\n  }\n}\n```', '2025-03-05 16:42:10', NULL, 'Y'),
(30, 6, '활동 선택 문제', '탐욕 알고리즘의 대표 예시로, 가장 많은 활동을 선택하는 문제를 다룹니다.\n\n```java\nArrays.sort(activities, (a,b)->a.end-b.end);\nint count=0,last=0;\nfor(Activity act:activities){\n  if(act.start>=last){ count++; last=act.end; }\n}\n```', '2025-05-01 09:20:01', NULL, 'Y'),
(29, 7, '문자열 패턴 매칭', '문자열에서 특정 패턴을 찾는 알고리즘으로, KMP 등이 대표적입니다.\n\n```java\nint[] lps = computeLPS(pattern);\n```', '2025-04-12 14:44:11', '2025-04-13 09:20:05', 'Y'),
(30, 7, '아나그램 판별', '두 문자열이 동일한 문자 구성으로 이루어졌는지 확인하는 문제입니다.\n\n```java\nArrays.sort(str1);\nArrays.sort(str2);\nreturn Arrays.equals(str1,str2);\n```', '2025-04-15 18:33:44', NULL, 'Y'),
(29, 8, '이진 탐색 트리(BST)', 'BST는 각 노드가 왼쪽 자식보다 크고 오른쪽 자식보다 작은 트리 구조를 갖습니다.\n\n```java\nclass Node{ int val; Node left,right; }\n```', '2025-03-28 14:15:15', NULL, 'Y'),
(30, 9, 'DFS', 'DFS는 그래프를 깊게 탐색하는 알고리즘으로, 재귀나 스택으로 구현할 수 있습니다.\n\n```java\nvoid dfs(int v){ visited[v]=true;\n for(int u:adj[v]) if(!visited[u]) dfs(u);\n}\n```', '2025-04-01 08:33:44', NULL, 'Y'),
(29, 9, 'BFS', 'BFS는 그래프를 넓게 탐색하는 알고리즘으로, 큐를 사용하여 구현합니다.\n\n```java\nQueue<Integer> q = new LinkedList<>();\nq.add(start); visited[start]=true;\nwhile(!q.isEmpty()){\n  int v=q.poll();\n  for(int u:adj[v]) if(!visited[u]){ q.add(u); visited[u]=true; }\n}\n```', '2025-04-03 10:14:55', NULL, 'Y'),
(30, 9, '다익스트라', '가중치가 있는 그래프에서 최단 경로를 찾는 알고리즘입니다.\n\n```java\nPriorityQueue<Node> pq=new PriorityQueue<>();\ndist[start]=0; pq.add(new Node(start,0));\n```', '2025-07-01 10:30:44', NULL, 'Y'),
(29, 9, '플로이드-워셜', '모든 정점 간 최단 경로를 구하는 DP 기반 알고리즘입니다.\n\n```java\nfor(int k=0;k<n;k++) for(int i=0;i<n;i++) for(int j=0;j<n;j++)\n  dist[i][j]=Math.min(dist[i][j],dist[i][k]+dist[k][j]);\n```', '2025-07-05 13:14:22', '2025-07-06 09:02:40', 'Y');

-- 알고리즘 학습 게시물 이미지
INSERT INTO Algo_Post_Image (post_id, image_url, created_at) 
VALUES
(1, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-18 11:25:00'),
(1, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-18 11:26:00'),
(2, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-20 15:50:00'),
(2, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-20 15:51:00'),
(3, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-22 19:15:00'),
(3, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-22 19:16:00'),
(4, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-01-10 14:25:00'),
(4, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-01-10 14:26:00'),
(5, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-01-15 09:20:00'),
(6, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-01-22 11:40:00'),
(7, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-01-25 13:45:00'),
(8, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-02-01 17:40:00'),
(9, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-02-05 13:22:12'),
(10, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-02-12 10:30:00'),
(11, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-02-14 09:20:05'),
(12, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-02-16 15:15:15'),
(13, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-01 09:55:20'),
(14, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-05 16:42:10'),
(15, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-05-01 09:20:01'),
(16, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-04-12 14:44:11'),
(17, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-04-15 18:33:44'),
(18, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-03-28 14:15:15'),
(19, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-04-01 08:40:00'),
(20, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-04-03 10:20:00'),
(21, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-07-01 10:30:44'),
(22, 'https://fastly.picsum.photos/id/1001/200/300.jpg?hmac=nQhEVl6C7qyfiRmcIe41BohR4WBcN1yhONnlCJryahU', '2025-07-05 13:14:22');

-- 개념 확인 문제
INSERT INTO Algo_Quiz_Question (algo_post_id, question, type) 
VALUES
(1, '스택의 특징으로 올바른 것은?', 'MULTIPLE'),     
(1, '스택은 FIFO 구조이다.', 'OX'),                
(2, '큐의 특징으로 올바른 것은?', 'MULTIPLE'),     
(2, '큐는 먼저 넣은 데이터가 먼저 나오는 구조이다.', 'OX'), 
(3, '연결 리스트의 장점으로 올바른 것은?', 'MULTIPLE'), 
(3, '연결 리스트는 임의 접근이 가능하다.', 'OX'),     
(4, '버블 정렬의 특징으로 올바른 것은?', 'MULTIPLE'),  
(4, '버블 정렬은 안정 정렬이다.', 'OX'),           
(5, '선택 정렬의 특징으로 올바른 것은?', 'MULTIPLE'),
(6, '퀵 정렬의 평균 시간 복잡도는?', 'MULTIPLE'),   
(7, '합병 정렬은 분할 정복을 사용하는가?', 'OX'),    
(8, '선형 탐색의 특징으로 맞는 것은?', 'MULTIPLE'),   
(9, '이진 탐색은 배열이 정렬되어 있어야 한다.', 'OX'), 
(9, '이진 탐색의 최악 시간 복잡도는?', 'MULTIPLE'),   
(10, '재귀를 사용하는 이유로 올바른 것은?', 'MULTIPLE'), 
(11, '팩토리얼 계산에 재귀를 사용할 수 있다.', 'OX'),  
(12, '재귀로 피보나치 수열을 구현하면 직관적이다.', 'OX'), 
(13, 'DP로 피보나치 수열을 구현하면 시간 복잡도는?', 'MULTIPLE'), 
(14, 'LIS 문제를 DP로 해결할 수 있다.', 'OX'),                   
(15, '활동 선택 문제는 어떤 알고리즘으로 해결하는가?', 'MULTIPLE'), 
(16, 'KMP 알고리즘은 무엇을 위해 사용되는가?', 'MULTIPLE'), 
(17, '두 문자열이 아나그램인지 확인할 때 정렬 후 비교할 수 있다.', 'OX'), 
(18, 'BST의 특징으로 올바른 것은?', 'MULTIPLE'), 
(19, 'DFS 구현에 사용되는 자료구조는?', 'MULTIPLE'), 
(20, 'BFS 구현에 사용되는 자료구조는?', 'MULTIPLE'), 
(21, '다익스트라 알고리즘은 음수 간선이 있으면 정상 작동하지 않는다.', 'OX'), 
(22, '플로이드-워셜 알고리즘은 모든 정점 간 최단 경로를 구할 수 있다.', 'OX'); 

-- 개념 확인 보기
INSERT INTO Algo_Quiz_Option (question_id, option_text, is_correct) 
VALUES
(1, 'FIFO', 0),
(1, 'LIFO', 1),
(1, '우선순위 큐', 0),
(2, 'O', 0),
(2, 'X', 1),
(3, 'FIFO', 1),
(3, 'LIFO', 0),
(3, '스택 기반', 0),
(4, 'O', 1),
(4, 'X', 0),
(5, '임의 접근 불가', 1),
(5, '임의 접근 가능', 0),
(6, 'O', 0),
(6, 'X', 1),
(7, '인접 원소 반복 비교', 1),
(7, '가장 작은 값 선택', 0),
(7, '분할 정복 사용', 0),
(8, 'O', 1),
(8, 'X', 0),
(9, '가장 작은 값 선택 후 교환', 1),
(9, '인접 원소 반복 비교', 0),
(9, '재귀 필요', 0),
(10, 'O(n log n)', 1),
(10, 'O(n^2)', 0),
(10, 'O(n)', 0),
(11, 'O', 1),
(11, 'X', 0),
(12, '배열 처음부터 순차 탐색', 1),
(12, '중간값 기준 탐색', 0),
(12, '분할 정복 필요', 0),
(13, 'O', 1),
(13, 'X', 0),
(14, 'O(n)', 1),
(14, 'O(log n)', 0),
(14, 'O(n^2)', 0),
(15, '반복 문제를 간단히 표현', 1),
(15, '메모리 절약', 0),
(15, '성능 향상', 0),
(16, 'O', 1),
(16, 'X', 0),
(17, 'O', 1),
(17, 'X', 0),
(18, 'O(n)', 1),
(18, 'O(n^2)', 0),
(18, 'O(log n)', 0),
(19, 'O', 1),
(19, 'X', 0),
(20, '탐욕 알고리즘', 1),
(20, '분할 정복', 0),
(20, '완전 탐색', 0),
(21, '패턴 매칭', 1),
(21, '정렬', 0),
(21, 'DFS', 0),
(22, 'O', 1),
(22, 'X', 0),
(23, '왼쪽 < 루트 < 오른쪽', 1),
(23, '왼쪽 > 루트 > 오른쪽', 0),
(23, '왼쪽 = 오른쪽', 0),
(24, '스택', 1),
(24, '큐', 0),
(24, '리스트', 0),
(25, '큐', 1),
(25, '스택', 0),
(25, '우선순위 큐', 0),
(26, 'O', 1),
(26, 'X', 0),
(27, 'O', 1),
(27, 'X', 0);
  
-- 알고리즘 학습 로드맵 게시물 댓글
INSERT INTO Algo_Comment (post_id, parent_id, member_id, content, created_at, updated_at, visibility) 
VALUES
(1, NULL, 1, '스택 관련 질문 너무 좋네요!', '2025-09-20 10:15:00', NULL, 'Y'),
(1, NULL, 2, '저는 LIFO 때문에 헷갈렸어요ㅋㅋ', '2025-09-20 11:20:33', NULL, 'N'),
(1, 1, 3, '맞아요, 그림으로 보면 훨씬 이해 쉽죠', '2025-09-20 12:30:10', NULL, 'Y'),
(1, 2, 4, '저도 처음엔 헷갈렸는데 연습 문제로 익혔어요', '2025-09-20 12:45:55', NULL, 'Y'),
(2, NULL, 1, '큐는 처음 배우면 FIFO 이해가 쉽지 않죠', '2025-09-19 09:40:00', NULL, 'Y'),
(2, NULL, 3, '자료 구조 정리할 때 스택보다 큐가 헷갈려요', '2025-09-19 10:15:42', NULL, 'N'),
(2, 1, 4, '실제로 코딩해보는 게 최고입니다', '2025-09-19 10:45:55', NULL, 'Y'),
(2, 2, 6, '그림으로 FIFO/LIFO 비교했더니 이해 빨랐어요', '2025-09-19 11:00:11', NULL, 'N'),
(3, NULL, 1, '연결 리스트 삽입 삭제가 효율적이라 좋네요', '2025-09-18 08:15:20', NULL, 'Y'),
(3, NULL, 2, '임의 접근은 힘들지만 연습 문제로 이해 가능', '2025-09-18 08:45:33', NULL, 'Y'),
(3, 1, 3, '맞아요, 노드 구조 그림으로 보면 이해 쉬움', '2025-09-18 09:10:42', NULL, 'Y'),
(4, NULL, 1, '버블 정렬 단순해서 이해하기 쉬움', '2025-09-17 08:20:15', NULL, 'Y'),
(4, NULL, 2, '효율은 별로지만 학습용으로 좋죠', '2025-09-17 08:45:33', NULL, 'N'),
(4, 1, 3, '작은 데이터에서만 쓰는 게 좋아요', '2025-09-17 09:10:42', NULL, 'Y'),
(5, NULL, 1, '선택 정렬 이해하기 좋음', '2025-09-16 07:50:00', NULL, 'Y'),
(5, NULL, 2, '교환 횟수 때문에 효율은 낮아요', '2025-09-16 08:15:33', NULL, 'N'),
(5, 1, 3, '그래도 구현 연습엔 좋습니다', '2025-09-16 08:40:21', NULL, 'Y'),
(6, NULL, 1, '퀵 정렬은 분할 정복의 대표', '2025-09-15 10:00:00', NULL, 'Y'),
(6, NULL, 2, '최악 경우는 O(n^2)라 주의!', '2025-09-15 10:25:12', NULL, 'N'),
(6, 1, 3, '그래도 평균 O(n log n)이라 실무에서 자주 사용', '2025-09-15 10:50:33', NULL, 'Y'),
(7, NULL, 1, '합병 정렬은 안정적인 정렬 알고리즘', '2025-09-14 09:10:20', NULL, 'Y'),
(7, 1, 2, '재귀적 구현이 핵심 포인트', '2025-09-14 09:35:55', NULL, 'Y'),
(8, NULL, 1, '선형 탐색은 단순하지만 느려요', '2025-09-13 08:00:00', NULL, 'Y'),
(8, 1, 2, '그래도 정렬 안 되어도 사용할 수 있어서 편함', '2025-09-13 08:25:33', NULL, 'Y'),
(9, NULL, 1, '이진 탐색은 정렬 필요', '2025-09-12 10:15:20', NULL, 'Y'),
(9, NULL, 2, '최악 시간 복잡도 O(log n)', '2025-09-12 10:45:33', NULL, 'Y'),
(9, 1, 3, '배열이 정렬되어 있어야 안정적', '2025-09-12 11:10:42', NULL, 'Y'),
(10, NULL, 1, '재귀는 코드가 간단해지는 장점', '2025-09-11 07:50:00', NULL, 'Y'),
(10, NULL, 2, '무한 호출 주의!', '2025-09-11 08:15:33', NULL, 'N'),
(10, 1, 3, '조건문 잘 쓰면 안전하게 사용 가능', '2025-09-11 08:40:21', NULL, 'Y'),
(11, NULL, 1, '팩토리얼 재귀로 구현해보니 직관적', '2025-09-10 09:00:00', NULL, 'Y'),
(11, NULL, 2, '재귀 호출 깊이에 주의하세요', '2025-09-10 09:25:33', NULL, 'N'),
(11, 1, 3, '재귀보다 DP로도 구현 가능', '2025-09-10 09:50:21', NULL, 'Y'),
(12, NULL, 1, '피보나치 재귀로 표현 직관적', '2025-09-09 10:15:00', NULL, 'Y'),
(12, NULL, 2, '효율은 DP보다 낮아요', '2025-09-09 10:40:33', NULL, 'N'),
(12, 1, 3, '작은 수로 테스트할 때 직관적', '2025-09-09 11:05:21', NULL, 'Y'),
(13, NULL, 1, 'DP로 피보나치 구현 시간 단축 가능', '2025-09-08 08:20:00', NULL, 'Y'),
(13, 1, 2, '메모이제이션으로도 구현 가능', '2025-09-08 08:45:33', NULL, 'Y'),
(14, NULL, 1, 'LIS DP 문제 흥미롭네요', '2025-09-07 09:30:00', NULL, 'Y'),
(14, 1, 2, 'DP 연습하기 좋아요', '2025-09-07 09:55:33', NULL, 'Y'),
(15, NULL, 1, '활동 선택 문제 탐욕 알고리즘 대표', '2025-09-06 07:40:00', NULL, 'Y'),
(15, 1, 2, '활동 정렬 기준 잘 잡아야 함', '2025-09-06 08:05:33', NULL, 'Y'),
(16, NULL, 1, 'KMP로 문자열 패턴 매칭 효율적', '2025-09-05 08:15:00', NULL, 'Y'),
(16, NULL, 2, '처음엔 LPS 배열 헷갈림', '2025-09-05 08:40:33', NULL, 'N'),
(16, 1, 3, '패턴 길이에 따라 시간 절약됨', '2025-09-05 09:05:21', NULL, 'Y'),
(17, NULL, 1, '아나그램 판별 정렬 후 비교 편함', '2025-09-04 09:10:00', NULL, 'Y'),
(17, 1, 2, '문자 수가 많으면 해시 이용도 가능', '2025-09-04 09:35:33', NULL, 'Y'),
(18, NULL, 1, 'BST 노드 구조 이해하기', '2025-09-03 08:20:00', NULL, 'Y'),
(18, 1, 2, '왼쪽 < 루트 < 오른쪽 체크 필수', '2025-09-03 08:45:33', NULL, 'Y'),
(19, NULL, 1, 'DFS 구현 스택 활용', '2025-09-02 07:50:00', NULL, 'Y'),
(19, 1, 2, '재귀도 가능', '2025-09-02 08:15:33', NULL, 'Y'),
(20, NULL, 1, 'BFS 큐 활용', '2025-09-01 08:00:00', NULL, 'Y'),
(20, 1, 2, '레벨 탐색할 때 좋음', '2025-09-01 08:25:33', NULL, 'Y'),
(21, NULL, 1, '다익스트라 음수 간선 주의', '2025-08-31 09:00:00', NULL, 'Y'),
(21, 1, 2, '최단 경로 계산 핵심', '2025-08-31 09:25:33', NULL, 'Y'),
(22, NULL, 1, '플로이드-워셜 모든 정점 간 최단 경로', '2025-08-30 08:15:00', NULL, 'Y'),
(22, 1, 2, '3중 for문 최적화 고민 필요', '2025-08-30 08:40:33', NULL, 'Y');

-- 회원별 대분류별 진척도
INSERT INTO Algo_Member_Progress (member_id, roadmap_id, count) 
VALUES
(1,1,3),(1,2,2),(1,4,1),
(2,1,2),(2,3,1),(2,5,2),(2,7,1),(2,9,3),
(3,2,1),(3,6,1),
(4,1,3),(4,2,2),(4,4,1),(4,9,2),
(6,1,2),(6,3,1),(6,5,1),
(7,2,2),(7,7,1),
(9,1,3),(9,2,4),(9,4,2),(9,5,1),(9,9,3),
(10,1,2),(10,4,2),(10,6,1),
(12,1,1),(12,3,2),(12,5,2),(12,9,2),
(14,2,3),(14,4,1),(14,7,1),
(16,1,2),(16,4,3),(16,9,2),
(17,2,1),(17,5,2),
(19,1,3),(19,3,2),(19,4,1),(19,9,4),
(21,2,4),(21,4,2),(21,7,1),
(23,1,1),(23,5,2),
(26,2,4),(26,4,3),(26,9,3),
(27,1,2),(27,3,1),(27,5,2),(27,9,4);

-- 회원별 퀴즈 정답 이력 더미 데이터
INSERT INTO Member_Algo_Correct_Quiz_History (member_id, algo_quiz_question_id) 
VALUES
(1,1),(1,2),(1,3),(1,4),(1,7),
(2,1),(2,2),(2,3),(2,4),(2,9),(2,10),(2,11),(2,13),(2,14),
(3,3),(3,4),(3,11),(3,16),
(4,1),(4,2),(4,7),(4,8),(4,13),(4,14),(4,17),
(6,1),(6,2),(6,9),(6,10),(6,11),
(7,3),(7,4),(7,11),
(9,1),(9,2),(9,3),(9,4),(9,7),(9,8),(9,9),(9,13),(9,14),
(10,1),(10,2),(10,7),(10,8),(10,15),
(12,1),(12,2),(12,9),(12,10),(12,11),(12,14),
(14,3),(14,4),(14,11),
(16,1),(16,2),(16,7),(16,8),(16,14),
(17,3),(17,4),(17,9),(17,10),
(19,1),(19,2),(19,7),(19,8),(19,9),(19,10),(19,13),(19,14),
(21,3),(21,4),(21,11),(21,14),
(23,1),(23,2),(23,9),(23,10),
(26,3),(26,4),(26,7),(26,8),(26,14),
(27,1),(27,2),(27,9),(27,10),(27,13),(27,14);

-- 알고리즘 로드맵 총 문제 수 갱신 쿼리
UPDATE 
       ALGO_ROADMAP A
   SET A.QUESTION_COUNT = (SELECT COUNT(C.ID)
                             FROM ALGO_POST B
                            RIGHT JOIN ALGO_QUIZ_QUESTION C ON C.ALGO_POST_ID = B.ID
                            WHERE B.ROADMAP_ID = A.ID
                          ); 